---
#**************************************************************
# Script Name: win_patching_with_reboot_notify_clearflag.yml
# Description: Use this template when developing scripts
# Author: ElstonC
# Organization: Harman
#**************************************************************


- name:  Windows Update
  hosts: all
  gather_facts: True
  serial: 1
  vars:
    machineip: "{{ lookup('dig', inventory_hostname ) }}"

  tasks:
    - debug: msg="The value of machineip in dns is {{ machineip }}"

    # #use the search to filter 3rd party updates
    # - name: Search for updates excluding 3rd party updates 
    #   win_updates:
    #     category_names: ['SecurityUpdates','CriticalUpdates','UpdateRollups', 'Updates', 'DefinitionUpdates']
    #     whitelist: 
    #       - KB[0-9]{1,7}
    #     blacklist:
    #       - KBPMPC.
    #     state: searched
    #   register: available_updates

    #use the search to filter Microsoft updates
    - name: Search for updates excluding Microsoft updates 
      win_updates:
        category_names: ['SecurityUpdates','CriticalUpdates','UpdateRollups', 'Updates', 'DefinitionUpdates']
        blacklist: 
          - KB[0-9]{1,7}
        whitelist:
          - KBPMPC.
        state: searched
      register: available_updates

    # - name: Setup blacklist apps 
    #   set_fact:
    #     bapps: |
    #       {% set thirdpartyapps = [] %}
    #       {% for key, value in available_updates.updates.items() %}
    #       {% if 'SCUP Updates' in value.categories %}
    #       {{ thirdpartyapps.append(value.title) }}
    #       {% endif %}
    #       {% endfor %} 
    #       {{ thirdpartyapps | join(',')  | replace("[","") | replace("]","") | replace("'","") }}
    # - debug: msg="The third party apps for {{ inventory_hostname }} are {{ bapps | replace("\n","") }}"

    # - debug: 
    #     msg: |
    #       {% set thirdpartyapps = [] %}
    #       {{ inventory_hostname }} has {{ available_updates.found_update_count }} updates available. 
    #       The following updates are available for install:
    #       {% for key, value in available_updates.updates.items() %}
    #       {% if 'SCUP Updates' in value.categories %}
    #       {{ value.title }} is a 3rd party app.
    #       {{ thirdpartyapps.append(value.title) }}
    #       {% endif %}
    #       {% endfor %} 
    #       {{ thirdpartyapps|join(',') }}

    
    

    # Need to filter scup updates and get the list of titels in a dict
    # once the dict is available pass it in to the blacklist of the update so all the titles get ignored.



    # - name: If machineip has a value then start working
    #   block:
    #     - setup:
    #         filter: ansible_reboot_pending
    #       register: setup
    #     - debug: var=setup 
    #     - name: Configure System RestorePoint
    #       block:
    #         - name: Start the volume shadow copy service
    #           win_service:
    #             name: VSS
    #             start_mode: auto
    #             state: started
    #         - name: Start the Microsoft Software Shadow Copy Provider
    #           win_service:
    #             name: swprv
    #             start_mode: auto
    #             state: started
    #         - name: Start the Microsoft Storage Spaces SMP
    #           win_service:
    #             name:  smphost
    #             start_mode: auto
    #             state: started
    #         - name: Enable System Restore
    #           win_shell: |
    #             Enable-ComputerRestore -drive 'C:'
    #         - name: Create system checkpoint
    #           win_shell: |
    #             Checkpoint-Computer -Description 'RemoveRebootFlag' -RestorePointType MODIFY_SETTINGS
    #       when:
    #         ansible_reboot_pending == True
        
    #     - block:
    #         - name: Clear reboot flag in HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\pendingfileoperations
    #           win_regedit: 
    #             path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager'
    #             name: PendingFileRenameOperations
    #             state: absent
    #             delete_key: yes
    #           when:
    #             ansible_reboot_pending == True 
    #         - name: Clear reboot flag in HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\rebootrequired
    #           win_regedit: 
    #             path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired'
    #             state: absent
    #           when:
    #             ansible_reboot_pending == True 
    #       ignore_errors: yes

    #     - name: Running Windows Update
    #       win_updates:
    #         category_names: ['SecurityUpdates','CriticalUpdates','UpdateRollups', 'Updates', 'DefinitionUpdates']
    #         blacklist: " {{ bapps }}  "

    #       register: result
    #     - debug: var=result

    #     # reboot only if required
    #     - name: Create schedule using the powershell script
    #       win_shell: |
    #         Copy-Item '\\corporate.datacard.com\NETLOGON\rebootedc' C:\ProgramData\awx\ -Recurse -Force
    #         C:\ProgramData\awx\rebootedc\reboot.ps1
    #       when: result.reboot_required  

    #   # when: machineip|length > 0
    #   when: machineip|regex_search("(([0-9](?!\d)|[1-9][0-9](?!\d)|1[0-9]{2}(?!\d)|2[0-4][0-9](?!\d)|25[0-5](?!\d))[.]?){4}")
      